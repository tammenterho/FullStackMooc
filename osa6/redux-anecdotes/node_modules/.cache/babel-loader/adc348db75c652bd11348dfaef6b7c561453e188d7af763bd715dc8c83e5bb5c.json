{"ast":null,"code":"\"use strict\";\n\nconst {\n  nanoid\n} = require('nanoid');\nconst pluralize = require('pluralize');\nmodule.exports = {\n  getRemovable,\n  createId,\n  deepQuery\n}; // Returns document ids that have unsatisfied relations\n// Example: a comment that references a post that doesn't exist\n\nfunction getRemovable(db, opts) {\n  const _ = this;\n  const removable = [];\n  _.each(db, (coll, collName) => {\n    _.each(coll, doc => {\n      _.each(doc, (value, key) => {\n        if (new RegExp(`${opts.foreignKeySuffix}$`).test(key)) {\n          // Remove foreign key suffix and pluralize it\n          // Example postId -> posts\n          const refName = pluralize.plural(key.replace(new RegExp(`${opts.foreignKeySuffix}$`), '')); // Test if table exists\n\n          if (db[refName]) {\n            // Test if references is defined in table\n            const ref = _.getById(db[refName], value);\n            if (_.isUndefined(ref)) {\n              removable.push({\n                name: collName,\n                id: doc.id\n              });\n            }\n          }\n        }\n      });\n    });\n  });\n  return removable;\n} // Return incremented id or uuid\n// Used to override lodash-id's createId with utils.createId\n\nfunction createId(coll) {\n  const _ = this;\n  const idProperty = _.__id();\n  if (_.isEmpty(coll)) {\n    return 1;\n  } else {\n    let id = _(coll).maxBy(idProperty)[idProperty]; // Increment integer id or generate string id\n\n    return _.isFinite(id) ? ++id : nanoid(7);\n  }\n}\nfunction deepQuery(value, q) {\n  const _ = this;\n  if (value && q) {\n    if (_.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        if (_.deepQuery(value[i], q)) {\n          return true;\n        }\n      }\n    } else if (_.isObject(value) && !_.isArray(value)) {\n      for (const k in value) {\n        if (_.deepQuery(value[k], q)) {\n          return true;\n        }\n      }\n    } else if (value.toString().toLowerCase().indexOf(q) !== -1) {\n      return true;\n    }\n  }\n}","map":{"version":3,"names":["nanoid","require","pluralize","module","exports","getRemovable","createId","deepQuery","db","opts","_","removable","each","coll","collName","doc","value","key","RegExp","foreignKeySuffix","test","refName","plural","replace","ref","getById","isUndefined","push","name","id","idProperty","__id","isEmpty","maxBy","isFinite","q","isArray","i","length","isObject","k","toString","toLowerCase","indexOf"],"sources":["C:/FullStackMooc/osa6/redux-anecdotes/node_modules/json-server/lib/server/mixins.js"],"sourcesContent":["\"use strict\";\n\nconst {\n  nanoid\n} = require('nanoid');\n\nconst pluralize = require('pluralize');\n\nmodule.exports = {\n  getRemovable,\n  createId,\n  deepQuery\n}; // Returns document ids that have unsatisfied relations\n// Example: a comment that references a post that doesn't exist\n\nfunction getRemovable(db, opts) {\n  const _ = this;\n\n  const removable = [];\n\n  _.each(db, (coll, collName) => {\n    _.each(coll, doc => {\n      _.each(doc, (value, key) => {\n        if (new RegExp(`${opts.foreignKeySuffix}$`).test(key)) {\n          // Remove foreign key suffix and pluralize it\n          // Example postId -> posts\n          const refName = pluralize.plural(key.replace(new RegExp(`${opts.foreignKeySuffix}$`), '')); // Test if table exists\n\n          if (db[refName]) {\n            // Test if references is defined in table\n            const ref = _.getById(db[refName], value);\n\n            if (_.isUndefined(ref)) {\n              removable.push({\n                name: collName,\n                id: doc.id\n              });\n            }\n          }\n        }\n      });\n    });\n  });\n\n  return removable;\n} // Return incremented id or uuid\n// Used to override lodash-id's createId with utils.createId\n\n\nfunction createId(coll) {\n  const _ = this;\n\n  const idProperty = _.__id();\n\n  if (_.isEmpty(coll)) {\n    return 1;\n  } else {\n    let id = _(coll).maxBy(idProperty)[idProperty]; // Increment integer id or generate string id\n\n\n    return _.isFinite(id) ? ++id : nanoid(7);\n  }\n}\n\nfunction deepQuery(value, q) {\n  const _ = this;\n\n  if (value && q) {\n    if (_.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        if (_.deepQuery(value[i], q)) {\n          return true;\n        }\n      }\n    } else if (_.isObject(value) && !_.isArray(value)) {\n      for (const k in value) {\n        if (_.deepQuery(value[k], q)) {\n          return true;\n        }\n      }\n    } else if (value.toString().toLowerCase().indexOf(q) !== -1) {\n      return true;\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}